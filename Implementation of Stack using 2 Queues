import java.util.Scanner;

import java.util.*;
class Stack {

    public Queue<Integer> q1;
    public Queue<Integer> q2;
	

    public Stack() {
        q1 = new LinkedList<>();
        q2 = new LinkedList<>();
      
    }



    /*----------------- Public Functions of Stack -----------------*/


    public int getSize() { 
        return this.q1.size();
    }

    public boolean isEmpty() {
       return this.q1.size() == 0;
    }

    public void push(int element) {
     	this.q1.add(element);
    }

    public int pop() {
     
        if(this.isEmpty()){
            return -1;
        }
        while(this.q1.size()>1){
            this.q2.add(this.q1.poll());
        }
        int ans = this.q1.poll();
        Queue<Integer> temp = this.q1;
        this.q1 = this.q2;
        this.q2 = temp;
        return ans;
    }

    public int top() {
         if(this.isEmpty()){
            return -1;
        }
        
        while(this.q1.size()>1){
            this.q2.add(this.q1.poll());
        }
        int ans = q1.poll();
        q2.add(ans);
        
        Queue<Integer> temp = this.q1;
        this.q1 = this.q2;
        this.q2 = temp;
        return ans;
    }
}


public class StackUse {

	private static Scanner s = new Scanner(System.in);

	public static void main(String[] args) {
		Stack stack = new Stack();

		int q = s.nextInt();

		while (q > 0) {
			int choice, input;
			choice = s.nextInt();

			switch(choice) {
				case 1:
					input = s.nextInt();
					stack.push(input);
					break;

				case 2:
					System.out.println(stack.pop());
					break;

				case 3:
					System.out.println(stack.top());
					break;

				case 4:
					System.out.println(stack.getSize());
					break; 

				default: 
					System.out.println((stack.isEmpty()) ? "true" : "false");
			}

			q -= 1;
		}

	}

}
