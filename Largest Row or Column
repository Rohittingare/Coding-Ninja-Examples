import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Runner {

    public static void findLargest(int mat[][]){
		
        int n = mat.length;
        if(n<=0){
            System.out.print("row 0 "+Integer.MIN_VALUE);
            return;
        }
        int m = mat[0].length;
        int rowSum =0, colSum = 0;
        int rowIndex = -1, colIndex = -1;
        int sum = 0;
        for(int i =0; i<n;i++){
            for(int j=0; j<m;j++){
                sum+=mat[i][j];
            }
            if(sum > rowSum){
                rowSum = sum;
                rowIndex = i;
            }
            sum =0;
        }
        for(int i =0; i<m;i++){
            for(int j=0; j<n;j++){
                sum+=mat[j][i];
            }
            if(sum > colSum){
                colSum = sum;
                colIndex = i;
            }
            sum =0;
        }
        if(rowSum >= colSum){
            System.out.print("row "+rowIndex+" "+rowSum);

        }else{
            System.out.print("column "+colIndex+" "+colSum);

        }
	}


    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    
    public static int[][] take2DInput() throws IOException {
        String[] strRowsCols = br.readLine().trim().split("\\s");
        int n_rows = Integer.parseInt(strRowsCols[0]);
        int m_cols = Integer.parseInt(strRowsCols[1]);

        if (n_rows == 0) {
            return new int[0][0];
        }


        int[][] mat = new int[n_rows][m_cols];

        for (int row = 0; row < n_rows; row++) {
            String[] strNums; 
            strNums = br.readLine().trim().split("\\s");
            
            for (int col = 0; col < m_cols; col++) {
                mat[row][col] = Integer.parseInt(strNums[col]);
            }
        }

        return mat;
    }


    public static void main(String[] args) throws NumberFormatException, IOException {
        int t = Integer.parseInt(br.readLine().trim());

        while(t > 0) {

            int[][] mat = take2DInput();

            Solution.findLargest(mat);
            System.out.println();

            t -= 1;
        }
    }
}
