import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

class LinkedListNode<T> {
    T data;
    LinkedListNode<T> next;
    
    public LinkedListNode(T data) {
        this.data = data;
    }
}


/*

    Following is the Node class already written for the Linked List

    class LinkedListNode<T> {
        T data;
        LinkedListNode<T> next;
    
        public LinkedListNode(T data) {
            this.data = data;
        }
    }

*/

class Solution {
    
     
    public static LinkedListNode<Integer> midMergeSort(LinkedListNode<Integer> head){
        
        LinkedListNode<Integer> slow = head;
        LinkedListNode<Integer> fast = head;
        
        while( fast.next != null){
            if(fast.next.next==null){
                break;
            }
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
    
    public static LinkedListNode<Integer> mergeTwoSortedLinkedLists(LinkedListNode<Integer> head1, LinkedListNode<Integer> head2) {
        
        LinkedListNode<Integer>head, temp;
        if(head1 == null && head2 == null){
            return head1;
        }else if(head1 == null && head2.next != null){
            return head2;
        }else if(head2 == null && head1.next != null){
            return head1;
        }else{
            if(head1.data < head2.data){
                head = head1;
                temp = head1;
                head1 = head1.next; 
            }else{
                head = head2;
                temp = head2;
                head2 = head2.next;
            }
        }

        while(head1!= null && head2!= null){
            if(head1.data <head2.data){
                temp.next = head1;
                temp = head1;
                head1 = head1.next;

            }
            else{
                temp.next = head2;
                temp = head2;
                head2 = head2.next;

            }
        }

        while(head1!=null){
            
             temp.next = head1;
             temp = head1;
            head1 = head1.next;
            
        }
        
        while(head2!=null){
            
             temp.next = head2;
             temp = head2;
                head2 = head2.next;
        }
        
        return head;
        
        
    }

	public static LinkedListNode<Integer> mergeSort(LinkedListNode<Integer> head) {
		
        if(head == null || head.next == null){
            return head;
        }
        
        LinkedListNode<Integer> head1 = head;
        LinkedListNode<Integer> mid = midMergeSort(head);
        LinkedListNode<Integer> head2 = mid.next;
        mid.next = null;
        
        head1 = mergeSort(head1);
        head2 = mergeSort(head2);
        
        LinkedListNode<Integer> sorted = mergeTwoSortedLinkedLists(head1, head2);
        
        return sorted;
        
	}

}

public class MergeSort {
    
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    
    public static LinkedListNode<Integer> takeInput() throws IOException {
        LinkedListNode<Integer> head = null, tail = null;

        String[] datas = br.readLine().trim().split("\\s");

        int i = 0;
        while(i < datas.length && !datas[i].equals("-1")) {
            int data = Integer.parseInt(datas[i]);
            LinkedListNode<Integer> newNode = new LinkedListNode<Integer>(data);
            if(head == null) {
                head = newNode;
                tail = newNode;
            }
            else {
                tail.next = newNode;
                tail = newNode;
            }
            i += 1;
        }

        return head;
    }
    
    public static void print(LinkedListNode<Integer> head) {
        while(head != null) {
            System.out.print(head.data + " ");
            head = head.next;
        }
        
        System.out.println();
    }
    
    public static void main(String[] args) throws NumberFormatException, IOException {
        
        int t = Integer.parseInt(br.readLine().trim());

        while (t > 0) {
            
            LinkedListNode<Integer> head = takeInput();

            LinkedListNode<Integer> newHead = Solution.mergeSort(head);
            print(newHead);
            
            t -= 1;
        }

    }
}
